-- MySQL Script generated by MySQL Workbench
-- Tue Mar  9 19:32:37 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema trackingcompany
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `trackingcompany` ;

-- -----------------------------------------------------
-- Schema trackingcompany
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `trackingcompany` DEFAULT CHARACTER SET utf8 ;
USE `trackingcompany` ;

-- -----------------------------------------------------
-- Table `Brands`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Brands` ;

CREATE TABLE IF NOT EXISTS `Brands` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `BrandName` VARCHAR(50) NOT NULL,
  `Country` VARCHAR(50) NOT NULL,
  `Rathing` DOUBLE NOT NULL,
  `Description` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `BrandName_UNIQUE` ON `Brands` (`BrandName` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `BusStops`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BusStops` ;

CREATE TABLE IF NOT EXISTS `BusStops` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  `Description` VARCHAR(100) NOT NULL,
  `Status` TINYINT NULL DEFAULT 1,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `Name_UNIQUE` ON `BusStops` (`Name` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `BusStopsData`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BusStopsData` ;

CREATE TABLE IF NOT EXISTS `BusStopsData` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `BusStopCipher` INT NOT NULL,
  `Route` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_BusStopsData_BusStops1`
    FOREIGN KEY (`BusStopCipher`)
    REFERENCES `BusStops` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_BusStopsData_Route1`
    FOREIGN KEY (`Route`)
    REFERENCES `Route` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Cars`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Cars` ;

CREATE TABLE IF NOT EXISTS `Cars` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `Cipher` VARCHAR(20) NOT NULL,
  `Brand` INT NOT NULL,
  `Name` VARCHAR(80) NOT NULL,
  `Number` VARCHAR(6) NOT NULL,
  `Capacity` INT NOT NULL,
  `Region` INT NOT NULL,
  `VIN` VARCHAR(17) NOT NULL,
  `Status` TINYINT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_Cars_Brands`
    FOREIGN KEY (`Brand`)
    REFERENCES `Brands` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Employees`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Employees` ;

CREATE TABLE IF NOT EXISTS `Employees` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `Cipher` VARCHAR(20) NOT NULL,
  `FirstName` VARCHAR(45) NOT NULL,
  `SecondName` VARCHAR(45) NOT NULL,
  `MiddleName` VARCHAR(45) NOT NULL,
  `Role` INT NOT NULL,
  `NumberOutputInLastMonth` INT NULL DEFAULT 0,
  `NumberOutputInThisMonth` INT NULL DEFAULT 0,
  `Status` TINYINT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_Employees_Roles1`
    FOREIGN KEY (`Role`)
    REFERENCES `Roles` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `Cipher_UNIQUE` ON `Employees` (`Cipher` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `Roles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Roles` ;

CREATE TABLE IF NOT EXISTS `Roles` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `RoleName` VARCHAR(50) NOT NULL,
  `Salary` FLOAT NOT NULL,
  `Description` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Route`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Route` ;

CREATE TABLE IF NOT EXISTS `Route` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(6) NOT NULL,
  `DriverCipher` INT NOT NULL,
  `ConductorCipher` INT NOT NULL,
  `CarCipher` INT NOT NULL,
  `ControllerCipher` INT NOT NULL,
  `Price` FLOAT NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_Route_Cars1`
    FOREIGN KEY (`CarCipher`)
    REFERENCES `Cars` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Route_Employees1`
    FOREIGN KEY (`DriverCipher`)
    REFERENCES `Employees` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Route_Employees2`
    FOREIGN KEY (`ConductorCipher`)
    REFERENCES `Employees` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Route_Employees3`
    FOREIGN KEY (`ControllerCipher`)
    REFERENCES `Employees` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `trackingcompany` ;

-- -----------------------------------------------------
-- procedure AddBrand
-- -----------------------------------------------------

USE `trackingcompany`;
DROP procedure IF EXISTS `AddBrand`;

DELIMITER $$
USE `trackingcompany`$$
CREATE PROCEDURE `AddBrand` (brname varchar(50), coun varchar(50), rath double, descr varchar(100))
BEGIN
insert into brands (brandname, country, rathing, description) values (brname,  coun, rath, descr);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddRole
-- -----------------------------------------------------

USE `trackingcompany`;
DROP procedure IF EXISTS `AddRole`;

DELIMITER $$
USE `trackingcompany`$$
CREATE PROCEDURE `AddRole` (rn varchar(45), des varchar(100), sal float)
BEGIN
insert into roles (rolename, description, salary) values (rn, des, sal);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddEmployee
-- -----------------------------------------------------

USE `trackingcompany`;
DROP procedure IF EXISTS `AddEmployee`;

DELIMITER $$
USE `trackingcompany`$$
CREATE PROCEDURE `AddEmployee` (fn varchar(45), sn varchar(45), mn varchar(45), rname varchar(50))
BEGIN
declare tmp int default 0;
declare rid int default -1;
set tmp=(select count(*) from employees where substring_index(cipher,"/",2)=curdate());
set rid=(select id from roles where rolename = rname);
if (rid>0) then
insert into employees (cipher, firstname, secondname, middlename, role) values (concat(curdate(),"/",rid,"/",tmp+1),fn, sn, mn, rid);
else
select "Please, check input value: RoleName" as "Error";
end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddBusStop
-- -----------------------------------------------------

USE `trackingcompany`;
DROP procedure IF EXISTS `AddBusStop`;

DELIMITER $$
USE `trackingcompany`$$
CREATE PROCEDURE `AddBusStop` (n varchar(50), des varchar(100))
BEGIN
declare data int  default -1;
set data = (select (count(*)) from activebusstops where status = true) ;
if (data>0)
then
update busstops set status=true where (name=n and description=des);
else
insert into busstops (name, description) values (n, des);
end if;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddCar
-- -----------------------------------------------------

USE `trackingcompany`;
DROP procedure IF EXISTS `AddCar`;

DELIMITER $$
USE `trackingcompany`$$
CREATE PROCEDURE `AddCar` (brname varchar(50), n varchar(80), ns int, numb varchar(6), reg int, v varchar(17))
BEGIN
declare brandid int default -1;
declare flag  int default 0;
declare countcar int default 0;/*count registered cars now*/
set brandid = (select id from brands where brands.brandname=brname);

set countcar = (select count(*) from cars where substring_index(cars.cipher, "/",-1)=curdate());
if ((convert(substring(numb,3,3),unsigned))  and (length(numb)=6) )
then
set flag=1;
else
select "uncorrect input values" as error;
end if;
if (flag=1) then
insert into cars (cipher, brand,name,capacity,number , region, vin) values (concat(curdate(), "/", countcar+1), brandid, n, ns, numb, reg, v);
else
select "Error input" as "Error";
end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddRoute
-- -----------------------------------------------------

USE `trackingcompany`;
DROP procedure IF EXISTS `AddRoute`;

DELIMITER $$
USE `trackingcompany`$$
CREATE PROCEDURE `AddRoute` (n varchar(6), drcipher varchar(20), carcid varchar(20),   contcipher varchar(20), condcipher varchar(20))
BEGIN
declare drcipid int default -1;
declare contcipid int default -1;
declare condcipid int default -1;
declare carcipid int default -1;
select id into condcipid from employees where employees.cipher = condcipher COLLATE utf8_unicode_ci;
select id into contcipid from employees where employees.cipher = contcipher COLLATE utf8_unicode_ci;
select id into drcipid from employees where employees.cipher = drcipher COLLATE utf8_unicode_ci;
select id into carcid from cars where cars.cipher = carcid COLLATE utf8_unicode_ci;
if ((drcipid>0) and (contcipid>0) and (condcipid>0))
then
insert into route (name, drivercipher, conductorcipher, carcipher, controllercipher) values (n,drcipid, condcipid, carcid,contcipid);
else 
select "Please check input values" as "Error";
end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function GetSalary
-- -----------------------------------------------------

USE `trackingcompany`;
DROP function IF EXISTS `GetSalary`;

DELIMITER $$
USE `trackingcompany`$$
CREATE function `GetSalary` (empcipher varchar(50))
returns double
deterministic
BEGIN
declare finz double default -1;
declare rate int default 0;
declare roleid int default -1;
declare daym int;
declare diff int default -1;
set daym = (select month(curdate()));
set roleid = (select role from employees where cipher=empcipher COLLATE utf8_unicode_ci);
if (roleid>0)
then 
set rate = (select salary from roles where id = roleid)*daym COLLATE utf8_unicode_ci;
end if;
set diff = (select (numberoutputinthismonth-numberoutputinlastmonth) from employees where cipher=empcipher COLLATE utf8_unicode_ci);
if ((rate>0) or (diff>0))
then
set finz = rate*diff;
end if;
return finz;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure RegisterInput
-- -----------------------------------------------------

USE `trackingcompany`;
DROP procedure IF EXISTS `RegisterInput`;

DELIMITER $$
USE `trackingcompany`$$
CREATE PROCEDURE `RegisterInput` (empcipher varchar(20))
BEGIN
declare empid int default -1;
set empid = (select id from employees where cipher=empcipher collate  utf8_unicode_ci);
if (empid>0) then
update employees set NumberOutputInThisMonth=NumberOutputInThisMonth+1 where id = empid collate  utf8_unicode_ci;
else
select "Validation error. Please check correct input value";
end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DropEmployee
-- -----------------------------------------------------

USE `trackingcompany`;
DROP procedure IF EXISTS `DropEmployee`;

DELIMITER $$
USE `trackingcompany`$$
CREATE PROCEDURE `DropEmployee` (empcicpher varchar(20))
BEGIN
declare empid int default -1;
set empid=(select id from employees where cipher = empcipher);
if (empid>0) then
update employees set status=false where id=empid;
else
select "Employee not found. Please, check correction input value" as "Error";
end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DropCar
-- -----------------------------------------------------

USE `trackingcompany`;
DROP procedure IF EXISTS `DropCar`;

DELIMITER $$
USE `trackingcompany`$$
CREATE PROCEDURE `DropCar` (carcip varchar(20))
BEGIN
declare carid int default -1;
set carid=(select id from cars where cipher=carcip);
if (carid>0) then
update cars set status=false where id=carid;
else
select "Please check corrections input value" as "Error";
end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DropBusstop
-- -----------------------------------------------------

USE `trackingcompany`;
DROP procedure IF EXISTS `DropBusstop`;

DELIMITER $$
USE `trackingcompany`$$
CREATE PROCEDURE `DropBusstop` (n varchar(45))
BEGIN
declare bid int default -1;
set bid = (select id from busstops where name=n);
if (bid>0) then
update busstops set status=false where id=bid;
else
select "Please, check correction input value" as "Error";
end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PrintTicket
-- -----------------------------------------------------

USE `trackingcompany`;
DROP procedure IF EXISTS `PrintTicket`;

DELIMITER $$
USE `trackingcompany`$$
CREATE PROCEDURE `PrintTicket` (condcipher varchar(20))
BEGIN
declare cid int default -1;
declare tmp int;
set cid = (select id from employees where cipher = concipher);
if (cid>0) then
select max(id) into tmp  from route where conductorcipher=cid;
select route.name, cars.name, conductors.firstname, route.price from route join conductors join cars where id=tmp and route.conductorcipher=conductors.id and route.carcipher=cars.id;
else
select "Please check input value" as error;
end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `ActiveCars`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `ActiveCars` ;
USE `trackingcompany`;
CREATE  OR REPLACE algorithm=temptable VIEW `ActiveCars` AS select name, number, capacity, region, vin from cars where status = true;

-- -----------------------------------------------------
-- View `ActiveEmployees`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `ActiveEmployees` ;
USE `trackingcompany`;
CREATE  OR REPLACE algorithm=merge VIEW `ActiveEmployees` AS select cipher, firstname, secondname, middlename from employees;

-- -----------------------------------------------------
-- View `ActiveBusStops`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `ActiveBusStops` ;
USE `trackingcompany`;
CREATE  OR REPLACE algorithm=merge VIEW `ActiveBusStops` AS select name, description, status from busstops where status=true;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
